import dbclient from '../database/database';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';

dotenv.config();
const saltRounds: string = (process.env.SALT_ROUNDS as string);
const pepper: string = (process.env.PEPPER as string);

export type Order = {
  //id: Number; // autogenerated by postgres
  status: string;
  user_id: number;
};

export class OrderStore {
  async index(): Promise<Order[]> {
    try {
      const conn = await dbclient.connect();
      const sql = 'SELECT * FROM orders';
      const result = await conn.query(sql);
      conn.release;
      return result.rows;
    } catch (err) {
      throw new Error(`Cannot get orders ${err}`);
    }
  }

  async show(id: string): Promise<Order> {
    try {
      const sql = 'SELECT * FROM orders WHERE id=($1)';
      const conn = await dbclient.connect();
      const result = await conn.query(sql, [id]);
      conn.release();
      return result.rows[0];
    } catch (err) {
      throw new Error(`Could not find order ${id}. Error: ${err}`);
    }
  }

  async create(b: Order): Promise<Order> {
    try {
      if (b.status !== "active" && b.status !== "completed") {
        throw new Error(`An order status must be either active or completed`);
      }
      const sql = 'INSERT INTO orders (status, user_id) VALUES($1, $2) RETURNING *';
      const conn = await dbclient.connect();
      const result = await conn.query(sql, [b.status, b.user_id]);
      const order = result.rows[0];
      conn.release();
      return order;
    } catch (err) {
      throw new Error(`Could not create order ${b}. Error: ${err}`);
    }
  }

  async addItem(quantity: number, orderId: string, itemId: string): Promise<Order> {
    try {
      const sql = "INSERT INTO order_items (quantity, order_id, item_id) values ($1, $2, $3)";
      const conn = await dbclient.connect();

      const result = await conn.query(sql, [quantity, orderId, itemId]);
      const order = result.rows[0];
      if (order.status !== "active") {
        throw new Error(`Could not add product ${itemId} to order ${orderId} because order status is ${order.status}`);
      }

      conn.release();
      return order;
    } catch (err) {
      throw new Error(`Could not add item ${itemId} to order ${orderId}: ${err}`);
    }
  }
}
