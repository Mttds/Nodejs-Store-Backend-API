import dbclient from '../database/database';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';

dotenv.config();
const saltRounds: string = (process.env.SALT_ROUNDS as string);
const pepper: string = (process.env.PEPPER as string);

export type User = {
  //id: Number; // autogenerated by postgres
  username: string;
  firstname: string;
  lastname: string;
  password: string;
};

export class UserStore {
  async index(): Promise<User[]> {
    try {
        const conn = await dbclient.connect();
        const sql = 'SELECT * FROM users';
        const result = await conn.query(sql);
        conn.release;
        return result.rows;
    } catch (err) {
        throw new Error(`Cannot get users ${err}`);
    }
  }

  async show(id: string): Promise<User> {
    try {
        const sql = 'SELECT * FROM users WHERE id=($1)';
        const conn = await dbclient.connect();
        const result = await conn.query(sql, [id]);
        conn.release();
        return result.rows[0];
    } catch (err) {
        throw new Error(`Could not find user ${id}. Error: ${err}`);
    }
  }

  async create(u: User): Promise<User> {
    try {
      const conn = await dbclient.connect();
      const sql = 'INSERT INTO users (username, firstname, lastname, password_digest) VALUES($1, $2, $3, $4) RETURNING *';
      const sql2 = "SELECT id FROM users WHERE username = $1";
      const hash = bcrypt.hashSync(
        u.password + pepper, 
        parseInt(saltRounds)
      );

      if(u.username === "") {
        throw new Error(`Username cannot be empty.`);
      }

      let result = await conn.query(sql2, [u.username]);
      if (result.rows[0] != undefined && 'id' in result.rows[0]) {
        throw new Error(`There is already an user with the same username (${u.username}) in the Database.`);
      }

      result = await conn.query(sql, [u.username, u.firstname, u.lastname, hash]);
      const user = result.rows[0]
      conn.release();

      return user;
    } catch(err) {
      throw new Error(`Unable to create user (${u.username}): ${err}`);
    }
  }

  async authenticate(username: string, password: string): Promise<User | null> {
    const conn = await dbclient.connect();
    const sql = 'SELECT password_digest FROM users WHERE username = $1';

    const result = await conn.query(sql, [username]);

    if(result.rows.length) {
      const user = result.rows[0];

      if (bcrypt.compareSync(password + pepper, user.password_digest)) {
        return user;
      }
    }

    return null;
  }
}
